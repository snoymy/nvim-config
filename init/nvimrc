" Sections
" 
" - Plugins
" - Settings
" - Key mappings
" - Snippets
" - Terminal mode config
" - Theme settings
" - Script
" - Plugins key mappings
" - coc settings


" -- [ Plugins ] --
    call plug#begin('~/.local/share/nvim/site/autoload/')

        Plug 'kyazdani42/nvim-web-devicons'
        Plug 'kyazdani42/nvim-tree.lua'

        " Side scrollbar
        Plug 'dstein64/nvim-scrollview', { 'branch': 'main' }

        " ColorScheme
        " Plug 'tomasr/molokai'
        Plug 'snoymy/molokai'

        " Bottom bar
        Plug 'itchyny/lightline.vim'

        " Syntax check362
        Plug 'vim-syntastic/syntastic'

        " Coc
        Plug 'neoclide/coc.nvim', { 'branch': 'release' }

        " C/C++ funvtion highlight
        Plug 'octol/vim-cpp-enhanced-highlight'

        " Undo tree
        Plug 'simnalamburt/vim-mundo'

        " Javascript plugin
        Plug 'yuezk/vim-js'
        Plug 'maxmellon/vim-jsx-pretty'

        " Float terminal
        Plug 'voldikss/vim-floaterm'

        " Close tag
        Plug 'alvan/vim-closetag'

        " Smooth scroll
        Plug 'yuttie/comfortable-motion.vim'

        Plug 'ap/vim-buftabline'

        Plug 'snoymy/buffer-window'
        
    call plug#end()


" -- [ Settings ] --
    set encoding=utf-8
    set cmdheight=2
    set updatetime=300
    set undofile
    set undodir=~/.nvim/undo
    set termguicolors
    set mouse=a
    set splitbelow splitright
    set number 
    set relativenumber
    set expandtab
    set shiftwidth=4
    set noshowmode
    set cursorline
    set cursorlineopt=number
    set wrap
    set showbreak=â†ª


" -- [ Key mappings ] --
    inoremap jj <Esc>
    inoremap j<Space> j
    inoremap "" ""<left>
    inoremap \"\" \"\"<left><left>
    inoremap \'\' \'\'<left><left>
    inoremap '' ''<left>
    inoremap ( ()<left>
    inoremap (<Space> (
    inoremap () ()
    inoremap (; ();<left><left>
    inoremap [ []<left>
    inoremap [<Space> [
    inoremap [] []
    inoremap { {}<left>
    inoremap {<Space> {
    inoremap {} {}
    inoremap {<CR> {<CR>}<ESC>O
    inoremap {;<CR> {<CR>};<ESC>O
    inoremap , ,<c-g>u
    inoremap . .<c-g>u
    inoremap ! !<c-g>u
    inoremap ? ?<c-g>u
    inoremap : :<c-g>u
    inoremap ; ;<c-g>u
    inoremap = =<c-g>u
    inoremap ' '<c-g>u
    inoremap " "<c-g>u
    inoremap \| \|<c-g>u
    inoremap <Space> <C-]><Space><c-g>u

    nnoremap <silent> tt :10sp\|:terminal<CR>
    nnoremap <leader>d "0d
    nnoremap <leader>x "0x
    nnoremap <leader>c "0c
    " nnoremap <leader>s s
    nnoremap <leader>D "0D
    nnoremap <leader>X "0X
    nnoremap <leader>C "0C
    nnoremap <leader>S "0S
    nnoremap p "0p
    nnoremap P "0P
    nnoremap <leader>y "+y
    nnoremap <leader>Y "+y$
    nnoremap Y y$
    nnoremap o<Space> o
    nnoremap O<Space> O
    nnoremap oo o<ESC>
    nnoremap OO O<ESC>
    nnoremap "" ciw""<Esc>P 
    nnoremap '' ciw''<Esc>P 
    nnoremap (( ciw()<Esc>PF(
    nnoremap )) ciw()<Esc>P 
    nnoremap <leader>[[ ciw[]<Esc>PF[ 
    nnoremap <leader>]] ciw[]<Esc>P 
    nnoremap <leader>** ciw**<Esc>P 
    nnoremap `` ciw``<Esc>P 
    nnoremap <leader>"" ciw\"\"<Esc><Left>P 
    nnoremap <leader>'' ciw\'\'<Esc><Left>P 
    nnoremap <leader>s :%s/
    nnoremap <leader>( ciw()<Esc>PF(
    nnoremap <c-J> i<CR><ESC>
    nnoremap ZQ :q<CR>
    nnoremap ZQQ :q!<CR>
    nnoremap <silent> gt :bnext<CR>
    nnoremap <silent> gT :bprev<CR>
    nnoremap <silent> <C-l> :nohl<CR><C-l>
    nnoremap <silent> <F6> :call BufferWindowToggle()<CR>

    vnoremap <leader>d "0d
    vnoremap <leader>x "0x
    vnoremap <leader>c "0c
    " vnoremap <leader>s "0s
    vnoremap <leader>s :s/
    vnoremap <leader>D "0D
    vnoremap <leader>X "0X
    vnoremap <leader>C "0C
    vnoremap <leader>S "0S
    vnoremap p "0p
    vnoremap P "0P
    vnoremap <silent> J :m '>+1<CR>gv=gv
    vnoremap <silent> K :m '<-2<CR>gv=gv
    vnoremap "" c""<Esc>P 
    vnoremap '' c''<Esc>P 
    vnoremap (( c()<Esc>PF( 
    vnoremap )) c()<Esc>P 
    vnoremap <leader>[[ c[]<Esc>PF[ 
    vnoremap <leader>]] c[]<Esc>P 
    vnoremap <leader>** c**<Esc>P 
    vnoremap `` c``<Esc>P 

    tnoremap <Esc> <C-\><C-n>
    tnoremap <silent> <Esc><Esc> <C-\><C-n>:bd!<CR>
    tnoremap <C-W> <C-\><C-n><C-W>


" -- [ Snippets ] --
    " create function (spacebar trigger)
    au FileType python iabbr <silent> func def ():<ESC>^wi<C-R>=Eatchar('\s')<CR>
    au FileType c,cpp iabbr <silent> func ()<CR>{<CR><Up><Up><ESC>^i<C-R>=Eatchar('\s')<CR>
    au FileType c,cpp iabbr <silent> ifunc int ()<CR>{<CR><Up><Up><ESC>w^i<C-R>=Eatchar('\s')<CR>
    au FileType c iabbr <silent> imr #include <stdio.h><CR><CR>int main()<CR>{<CR><CR>return 0;<Up><TAB><C-R>=Eatchar('\s')<CR>
    au FileType cpp iabbr <silent> imr #include <iostream><CR><CR>int main()<CR>{<CR><CR>return 0;<Up><TAB><C-R>=Eatchar('\s')<CR>
    au FileType javascript iabbr <silent> func const () => {<CR><Up><ESC>^wi<C-R>=Eatchar('\s')<CR>
    au FileType rust iabbr <silent> func fn () {<CR><Up><ESC>^wi<C-R>=Eatchar('\s')<CR>

    " create function (<C-f> trigger)
    au FileType python inoremap <C-f> <ESC>"0diWidef <ESC>"0pa():<CR>
    au FileType c,cpp inoremap <C-f> <ESC>"0diW<ESC>"0pa()<CR>{}<Left><CR><CR><UP><TAB><UP><UP><ESC>^i <Left>
    au FileType javascript inoremap <C-f> <ESC>"0diWiconst <ESC>"0pa() => {}<Left><CR><CR><UP><TAB>
    au FileType rust inoremap <C-f> <ESC>"0diWifn <ESC>"0pa() {}<Left><CR><CR><UP><TAB>

    " create class
    au FileType dart inoremap <C-s>l <ESC>"0diWi
                \class <ESC>"0pa extends StatelessWidget {}<Left><CR><CR><UP><TAB>
                \const <ESC>"0pa({super.key});<CR><CR>
                \@override<CR>
                \Widget build(BuildContext context) {}<Left><CR><CR><UP><TAB>
                \<TAB>return ;<Left>




" -- [ Terminal mode config ] --
    au BufWinEnter,WinEnter term://* startinsert
    au TermOpen term://* startinsert


" -- [ Theme settings ] --
    set t_Co=256
    set t_ut=
    colorscheme molokai
    let g:lightline = { 'colorscheme': 'molokai' }


" -- [ Script ] --
    " Repeat Macro using dot
        " When . repeats g@, repeat the last macro.
        fun! AtRepeat(_)
            " If no count is supplied use the one saved in s:atcount.
            " Otherwise save the new count in s:atcount, so it will be
            " applied to repeats.
            let s:atcount = v:count ? v:count : s:atcount
            " feedkeys() rather than :normal allows finishing in Insert
            " mode, should the macro do that. @@ is remapped, so 'opfunc'
            " will be correct, even if the macro changes it.
            call feedkeys(s:atcount.'@@')
        endfun

        fun! AtSetRepeat(_)
            set opfunc=AtRepeat
        endfun

        " Called by g@ being invoked directly for the first time. Sets
        " 'opfunc' ready for repeats with . by calling AtSetRepeat().
        fun! AtInit()
            " Make sure setting 'opfunc' happens here, after initial playback
            " of the macro recording, in case 'opfunc' is set there.
            set opfunc=AtSetRepeat
            return 'g@l'
        endfun

        " Enable calling a function within the mapping for @
        nno <expr> <plug>@init AtInit()
        " A macro could, albeit unusually, end in Insert mode.
        ino <expr> <plug>@init "\<c-o>".AtInit()

        fun! AtReg()
            let s:atcount = v:count1
            let c = nr2char(getchar())
            return '@'.c."\<plug>@init"
        endfun

        nmap <expr> @ AtReg()

        fun! QRepeat(_)
            call feedkeys('@'.s:qreg)
        endfun

        fun! QSetRepeat(_)
            set opfunc=QRepeat
        endfun

        fun! QStop()
            set opfunc=QSetRepeat
            return 'g@l'
        endfun

        nno <expr> <plug>qstop QStop()
        ino <expr> <plug>qstop "\<c-o>".QStop()

        let s:qrec = 0
        fun! QStart()
            if s:qrec == 1
                let s:qrec = 0
                return "q\<plug>qstop"
            endif
            let s:qreg = nr2char(getchar())
            if s:qreg =~# '[0-9a-zA-Z"]'
                let s:qrec = 1
            endif
            return 'q'.s:qreg
        endfun

        nmap <expr> q QStart()

    " Save view
        "          FILE: restore_view.vim
        "      Language: vim script
        "    Maintainer: Yichao Zhou (broken.zhou AT gmail dot com)
        "       Version: 1.3
        "   Description: 
        "       This is a simple script to autosave cursor position and fold
        "       information using vim's mkview.  Although you can easily do this job by
        "       just add serveral line to {.,_}vimrc, write a script plugin can make it
        "       more clean and nice.  We assume you use a new enough Vim to enjoy
        "       these feature. Hope you love it:)
        "
        "       Views will be saved when you save/write a file or EXIT VIM.
        "
        " Suggested Setting:
        "       Please put them in you vimrc file.
        "           set viewoptions=cursor,folds,slash,unix
        "       
        "       Set it in a plugin file looks dirty to me.  So you'd better do it your
        "       self.  This only keywords not in viewoptions is "options". I believe it
        "       does not belong to a view.  If you think you need it, feel free to
        "       put it in.  If you do not want views of some files to be saved, please
        "       set g:loaded_restore_view. The longer time you use, the bigger view
        "       folder you will have.  So if you use UNIX environment, you may need to
        "       use cron to do some clean job.
        "
        "       Most of code is from wiki.


        if exists("g:loaded_restore_view")
            finish
        endif
        let g:loaded_restore_view = 1

        if !exists("g:skipview_files")
            let g:skipview_files = []
        endif

        function! MakeViewCheck()
            if &l:diff | return 0 | endif
            if &buftype != '' | return 0 | endif
            if expand('%') =~ '\[.*\]' | return 0 | endif
            if empty(glob(expand('%:p'))) | return 0 | endif
            if &modifiable == 0 | return 0 | endif
            if len($TEMP) && expand('%:p:h') == $TEMP | return 0 | endif
            if len($TMP) && expand('%:p:h') == $TMP | return 0 | endif

            let file_name = expand('%:p')
            for ifiles in g:skipview_files
                if file_name =~ ifiles
                    return 0
                endif
            endfor

            return 1
        endfunction

        augroup AutoView
            autocmd!
            " Autosave & Load Views.
            autocmd BufWritePre,BufWinLeave ?* if MakeViewCheck() | silent! mkview | endif
            autocmd BufWinEnter ?* if MakeViewCheck() | silent! loadview | endif
        augroup END


    " Delete view
        " #########################################################
        " # A way to delete 'mkview'
        function! MyDeleteView()
                let path = fnamemodify(bufname('%'),':p')
                " vim's odd =~ escaping for /
                let path = substitute(path, '=', '==', 'g')
                if empty($HOME)
                else
                        let path = substitute(path, '^'.$HOME, '\~', '')
                endif
                let path = substitute(path, '/', '=+', 'g') . '='
                " view directory
                let path = &viewdir.'/'.path
                call delete(path)
                echo "Deleted: ".path
        endfunction
        command Delview call MyDeleteView()
        " Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
        cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>


    " Toggle unfocus split to normal line number
        set number

        augroup numbertoggle
          autocmd!
          autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
          autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
        augroup END


" -- [ Plugins key mappings ] --
    nnoremap <leader>e <Cmd>CocCommand explorer<CR>
    nnoremap <F5> :MundoToggle<CR>
    nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
    nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>


" -- [ coc settings ] --
    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("nvim-0.5.0") || has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    " inoremap <silent><expr> <TAB>
    "       \ pumvisible() ? "\<C-n>" :
    "       \ <SID>check_back_space() ? "\<TAB>" :
    "       \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <expr><TAB> pumvisible() ? "\<C-N>" : "\<Tab>"

    " function! s:check_back_space() abort
    "   let col = col('.') - 1
    "   return !col || getline('.')[col - 1]  =~# '\s'
    " endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                 \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
      else
        execute '!' . &keywordprg . " " . expand('<cword>')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> for scroll float windows/popups.
    if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    " Use <C-l> for trigger snippet expand.
    imap <C-l> <Plug>(coc-snippets-expand)

    " Use <C-j> for select text for visual placeholder of snippet.
    vmap <C-j> <Plug>(coc-snippets-select)

    " Use <C-j> for jump to next placeholder, it's default of coc.nvim
    let g:coc_snippet_next = '<c-j>'

    " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
    let g:coc_snippet_prev = '<c-k>'

    " Use <C-j> for both expand and jump (make expand higher priority.)
    imap <C-j> <Plug>(coc-snippets-expand-jump)

    " Use <leader>x for convert visual selected code to snippet
    xmap <leader>x  <Plug>(coc-convert-snippet)


augroup fl_dart
  autocmd!
  autocmd Syntax dart highlight default link dartFlutterClasses     Type
  autocmd Syntax dart highlight default link dartFlutterTypedefs    Typedef
  autocmd Syntax dart highlight default link dartFlutterExceptions  Exception
  autocmd Syntax dart highlight default link dartFlutterConstants   Constant
  autocmd Syntax dart highlight default link dartFlutterEnums       Type
  autocmd Syntax dart highlight default link dartFlutterMixins      Type
  autocmd Syntax dart syntax keyword dartFlutterMixins
   \ AnimationEagerListenerMixin AnimationLazyListenerMixin
   \ AnimationLocalListenersMixin AnimationLocalStatusListenersMixin
   \ AnimationWithParentMixin AutomaticKeepAliveClientMixin LocalHistoryRoute
   \ PaintingBinding SingleTickerProviderStateMixin TickerProviderStateMixin
   \ ViewportNotificationMixin WidgetInspectorService WidgetsBinding
  autocmd Syntax dart syntax keyword dartFlutterEnums
   \ AnimationBehavior AnimationStatus AppLifecycleState Axis AxisDirection
   \ BannerLocation BlendMode BlurStyle BorderStyle BoxFit BoxShape Clip
   \ ConnectionState CrossAxisAlignment CrossFadeState DecorationPosition
   \ DiagnosticLevel DismissDirection DragAnchor FadeInImagePhase FilterQuality
   \ FlexFit FlutterLogoStyle FontStyle GrowthDirection HeroFlightDirection
   \ HitTestBehavior ImageRepeat MainAxisAlignment MainAxisSize Orientation
   \ Overflow PaintingStyle PathFillType PathOperation RenderComparison
   \ RoutePopDisposition SelectionChangedCause StackFit StrokeCap StrokeJoin
   \ TableCellVerticalAlignment TargetPlatform TextAffinity TextAlign
   \ TextBaseline TextDecorationStyle TextDirection TextOverflow
   \ TextSelectionHandleType TileMode VertexMode VerticalDirection WrapAlignment
   \ WrapCrossAlignment
  autocmd Syntax dart syntax keyword dartFlutterConstants
   \ immutable kAlwaysCompleteAnimation kAlwaysDismissedAnimation mustCallSuper
   \ optionalTypeArgs protected required visibleForTesting
  autocmd Syntax dart syntax keyword dartFlutterExceptions
   \ FlutterError TickerCanceled
  autocmd Syntax dart syntax keyword dartFlutterTypedefs
   \ AnimatedCrossFadeBuilder AnimatedListItemBuilder
   \ AnimatedListRemovedItemBuilder AnimatedSwitcherLayoutBuilder
   \ AnimatedSwitcherTransitionBuilder AnimationStatusListener
   \ AsyncWidgetBuilder ControlsWidgetBuilder CreateRectTween
   \ DismissDirectionCallback DragEndCallback DraggableCanceledCallback
   \ DragTargetAccept DragTargetBuilder DragTargetLeave DragTargetWillAccept
   \ ElementVisitor ErrorWidgetBuilder FormFieldBuilder FormFieldSetter
   \ FormFieldValidator GenerateAppTitle GestureDragCancelCallback
   \ GestureDragDownCallback GestureDragEndCallback GestureDragStartCallback
   \ GestureDragUpdateCallback GestureLongPressCallback
   \ GestureRecognizerFactoryConstructor GestureRecognizerFactoryInitializer
   \ GestureScaleEndCallback GestureScaleStartCallback
   \ GestureScaleUpdateCallback GestureTapCallback GestureTapCancelCallback
   \ GestureTapDownCallback GestureTapUpCallback HeroFlightShuttleBuilder
   \ ImageErrorListener ImageListener IndexedWidgetBuilder
   \ InspectorSelectButtonBuilder InspectorSelectionChangedCallback
   \ LayoutWidgetBuilder LocaleListResolutionCallback LocaleResolutionCallback
   \ NestedScrollViewHeaderSliversBuilder NotificationListenerCallback
   \ OrientationWidgetBuilder PageRouteFactory PointerCancelEventListener
   \ PointerDownEventListener PointerMoveEventListener PointerUpEventListener
   \ RebuildDirtyWidgetCallback RouteFactory RoutePageBuilder RoutePredicate
   \ RouteTransitionsBuilder ScrollNotificationPredicate
   \ SelectionChangedCallback SemanticIndexCallback SemanticsBuilderCallback
   \ ShaderCallback StatefulWidgetBuilder StateSetter
   \ TextSelectionOverlayChanged TransitionBuilder TweenConstructor TweenVisitor
   \ ValueChanged ValueGetter ValueSetter ValueWidgetBuilder ViewportBuilder
   \ VoidCallback WidgetBuilder WillPopCallback
  autocmd Syntax dart syntax keyword dartFlutterClasses
   \ AbsorbPointer Align Alignment AlignmentDirectional AlignmentGeometry
   \ AlignmentGeometryTween AlignmentTween AlignTransition AlwaysScrollableScrollPhysics
   \ AlwaysStoppedAnimation AndroidView Animatable AnimatedAlign AnimatedBuilder
   \ AnimatedContainer AnimatedCrossFade AnimatedDefaultTextStyle AnimatedList
   \ AnimatedListState AnimatedModalBarrier AnimatedOpacity AnimatedPadding
   \ AnimatedPhysicalModel AnimatedPositioned AnimatedPositionedDirectional AnimatedSize
   \ AnimatedSwitcher AnimatedWidget AnimatedWidgetBaseState Animation AnimationController
   \ AnimationMax AnimationMean AnimationMin AnnotatedRegion AspectRatio
   \ AssetBundleImageProvider AssetImage AsyncSnapshot AutomaticKeepAlive BackdropFilter
   \ BallisticScrollActivity Banner BannerPainter Baseline BeveledRectangleBorder
   \ BlockSemantics Border BorderDirectional BorderRadius BorderRadiusDirectional
   \ BorderRadiusGeometry BorderRadiusTween BorderSide BorderTween BottomNavigationBarItem
   \ BouncingScrollPhysics BouncingScrollSimulation BoxBorder BoxConstraints
   \ BoxConstraintsTween BoxDecoration BoxPainter BoxScrollView BoxShadow BuildContext
   \ Builder BuildOwner Canvas Center ChangeNotifier CheckedModeBanner CircleBorder
   \ CircularNotchedRectangle ClampingScrollPhysics ClampingScrollSimulation ClipContext
   \ ClipOval ClipPath ClipRect ClipRRect Color ColorFilter ColorSwatch ColorTween
   \ Column ComponentElement CompositedTransformFollower CompositedTransformTarget
   \ CompoundAnimation ConstantTween ConstrainedBox Container Cubic Curve
   \ CurvedAnimation Curves CurveTween CustomClipper CustomMultiChildLayout
   \ CustomPaint CustomPainter CustomPainterSemantics CustomScrollView
   \ CustomSingleChildLayout DecoratedBox DecoratedBoxTransition Decoration
   \ DecorationImage DecorationImagePainter DecorationTween DefaultAssetBundle
   \ DefaultTextStyle DefaultTextStyleTransition DefaultWidgetsLocalizations
   \ Directionality Dismissible DragDownDetails DragEndDetails Draggable
   \ DraggableDetails DragScrollActivity DragStartDetails DragTarget
   \ DragUpdateDetails DrivenScrollActivity EdgeInsets EdgeInsetsDirectional
   \ EdgeInsetsGeometry EdgeInsetsGeometryTween EdgeInsetsTween EditableText
   \ EditableTextState ElasticInCurve ElasticInOutCurve ElasticOutCurve Element
   \ ErrorWidget ExactAssetImage ExcludeSemantics Expanded FadeInImage
   \ FadeTransition FileImage FittedBox FittedSizes FixedColumnWidth
   \ FixedExtentMetrics FixedExtentScrollController FixedExtentScrollPhysics
   \ FixedScrollMetrics Flex FlexColumnWidth Flexible FlippedCurve Flow
   \ FlowDelegate FlowPaintingContext FlutterErrorDetails FlutterLogoDecoration
   \ FocusManager FocusNode FocusScope FocusScopeNode FontWeight Form FormField
   \ FormFieldState FormState FractionallySizedBox FractionalOffset
   \ FractionalOffsetTween FractionalTranslation FractionColumnWidth
   \ FutureBuilder GestureDetector GestureRecognizerFactory AssetBundleImageKey
   \ GestureRecognizerFactoryWithHandlers GlobalKey GlobalObjectKey
   \ GlowingOverscrollIndicator Gradient GridPaper GridView Hero HeroController
   \ HoldScrollActivity HSLColor HSVColor Icon IconData IconTheme IconThemeData
   \ IdleScrollActivity IgnorePointer Image ImageCache ImageConfiguration
   \ ImageIcon ImageInfo ImageProvider ImageShader ImageStream
   \ ImageStreamCompleter ImplicitlyAnimatedWidget ImplicitlyAnimatedWidgetState
   \ IndexedSemantics IndexedStack InheritedElement InheritedModel
   \ InheritedModelElement InheritedNotifier InheritedWidget InspectorSelection
   \ Interval IntrinsicColumnWidth IntrinsicHeight IntrinsicWidth IntTween
   \ KeepAlive KeepAliveHandle KeepAliveNotification Key KeyedSubtree
   \ LabeledGlobalKey LayerLink LayoutBuilder LayoutChangedNotification LayoutId
   \ LeafRenderObjectElement LeafRenderObjectWidget LimitedBox LinearGradient
   \ ListBody Listenable Listener ListView ListWheelChildBuilderDelegate
   \ ListWheelChildDelegate ListWheelChildListDelegate
   \ ListWheelChildLoopingListDelegate ListWheelElement ListWheelScrollView
   \ ListWheelViewport Locale LocalHistoryEntry Localizations
   \ LocalizationsDelegate LocalKey LongPressDraggable MaskFilter Matrix4
   \ Matrix4Tween MatrixUtils MaxColumnWidth MediaQuery MediaQueryData
   \ MemoryImage MergeSemantics MetaData MinColumnWidth ModalBarrier ModalRoute
   \ MultiChildLayoutDelegate MultiChildRenderObjectElement
   \ MultiChildRenderObjectWidget MultiFrameImageStreamCompleter
   \ NavigationToolbar Navigator NavigatorObserver NavigatorState
   \ NestedScrollView NestedScrollViewViewport NetworkImage
   \ NeverScrollableScrollPhysics NotchedShape Notification NotificationListener
   \ ObjectKey Offset Offstage OneFrameImageStreamCompleter Opacity
   \ OrientationBuilder OverflowBox Overlay OverlayEntry OverlayRoute
   \ OverlayState OverscrollIndicatorNotification OverscrollNotification Padding
   \ PageController PageMetrics PageRoute PageRouteBuilder PageScrollPhysics
   \ PageStorage PageStorageBucket PageStorageKey PageView Paint PaintingContext
   \ ParentDataElement ParentDataWidget Path PerformanceOverlay PhysicalModel
   \ PhysicalShape Placeholder PointerCancelEvent PointerDownEvent PointerEvent
   \ PointerMoveEvent PointerUpEvent PopupRoute Positioned PositionedDirectional
   \ PositionedTransition PreferredSize PreferredSizeWidget
   \ PrimaryScrollController ProxyAnimation ProxyElement ProxyWidget
   \ RadialGradient Radius RawGestureDetector RawGestureDetectorState RawImage
   \ RawKeyboardListener RawKeyEvent Rect RectTween RelativePositionedTransition
   \ RelativeRect RelativeRectTween RenderBox RenderNestedScrollViewViewport
   \ RenderObject RenderObjectElement RenderObjectToWidgetAdapter
   \ RenderObjectToWidgetElement RenderObjectWidget RenderSliverOverlapAbsorber
   \ RenderSliverOverlapInjector RepaintBoundary ReverseAnimation ReverseTween
   \ RichText RootRenderObjectElement RotatedBox RotationTransition
   \ RoundedRectangleBorder Route RouteAware RouteObserver RouteSettings Row
   \ RRect RSTransform SafeArea SawTooth ScaleEndDetails ScaleStartDetails
   \ ScaleTransition ScaleUpdateDetails Scrollable ScrollableState
   \ ScrollActivity ScrollActivityDelegate ScrollbarPainter ScrollBehavior
   \ ScrollConfiguration ScrollContext ScrollController ScrollDragController
   \ ScrollEndNotification ScrollHoldController ScrollMetrics ScrollNotification
   \ ScrollPhysics ScrollPosition ScrollPositionWithSingleContext
   \ ScrollSpringSimulation ScrollStartNotification ScrollUpdateNotification
   \ ScrollView Semantics SemanticsDebugger Shader ShaderMask Shadow ShapeBorder
   \ ShapeBorderClipper ShapeDecoration ShrinkWrappingViewport Simulation
   \ SingleChildLayoutDelegate SingleChildRenderObjectElement
   \ SingleChildRenderObjectWidget SingleChildScrollView Size
   \ SizeChangedLayoutNotification SizeChangedLayoutNotifier SizedBox
   \ SizedOverflowBox SizeTransition SizeTween SlideTransition
   \ SliverChildBuilderDelegate SliverChildDelegate SliverChildListDelegate
   \ SliverFillRemaining SliverFillViewport SliverFixedExtentList SliverGrid
   \ SliverGridDelegate SliverGridDelegateWithFixedCrossAxisCount
   \ SliverGridDelegateWithMaxCrossAxisExtent SliverList
   \ SliverMultiBoxAdaptorElement SliverMultiBoxAdaptorWidget
   \ SliverOverlapAbsorber SliverOverlapAbsorberHandle SliverOverlapInjector
   \ SliverPadding SliverPersistentHeader SliverPersistentHeaderDelegate
   \ SliverPrototypeExtentList SliverSafeArea SliverToBoxAdapter
   \ SliverWithKeepAliveWidget Spacer Stack StadiumBorder State StatefulBuilder
   \ StatefulElement StatefulWidget StatelessElement StatelessWidget
   \ StatusTransitionWidget StepTween StreamBuilder StreamBuilderBase
   \ SweepGradient Table TableBorder TableCell TableColumnWidth TableRow
   \ TapDownDetails TapUpDetails Text TextBox TextDecoration
   \ TextEditingController TextEditingValue TextInputType TextPainter
   \ TextPosition TextRange TextSelection TextSelectionControls
   \ TextSelectionDelegate TextSelectionOverlay TextSpan TextStyle
   \ TextStyleTween Texture Threshold TickerFuture TickerMode TickerProvider
   \ Title Tolerance TrackingScrollController TrainHoppingAnimation Transform
   \ TransformProperty TransitionRoute Tween TweenSequence TweenSequenceItem
   \ TypeMatcher UiKitView UnconstrainedBox UniqueKey UniqueWidget
   \ UserScrollNotification ValueKey ValueListenableBuilder ValueNotifier
   \ Velocity Viewport Visibility Widget WidgetInspector WidgetsApp
   \ WidgetsBindingObserver WidgetsFlutterBinding WidgetsLocalizations
   \ WidgetToRenderBoxAdapter WillPopScope Wrap

augroup end
